using System.Drawing;
using FluentAssertions;
using NUnit.Framework;
using TagCloud;

namespace TagCloudTests;

[TestFixture]
[Parallelizable(ParallelScope.All)]
public class TagCloudDrawer_Should
{
    private readonly DirectoryInfo testDirectory = new("./AutoGeneratedTestDirectory");
    
    [OneTimeSetUp]
    public void OneTimeSetUp()
    {
        if (testDirectory.Exists) testDirectory.Delete(true);
        testDirectory.Create();
    }
    
    [OneTimeTearDown]
    public void OneTimeTearDown()
    {
        if (testDirectory.Exists) testDirectory.Delete(true);
    }

    [Test]
    public void ImageSize_ThrowArgumentException_OnNegativeSize()
    {
        var drawer = new TagCloudDrawer();
        var size = new Size(-1, -1);

        var act = () => drawer.ImageSize = size;

        act.Should().Throw<ArgumentException>()
            .WithMessage($"Width and height of the image must be positive, but {size}");
    }
    
    [Test]
    public void DrawTagCloud_ThrowDirectoryNotFoundException_OnNonExistentDirectory()
    {
        var layouter = new CircularCloudLayouter(new Point(0, 0));
        var drawer = new TagCloudDrawer();
        const string filename = "filename.jpg";
        var directory = new DirectoryInfo($"{testDirectory.FullName}/NonExistent");
        if (directory.Exists) directory.Delete();

        var act = () => drawer.DrawTagCloud(layouter, filename, directory);

        act.Should().Throw<DirectoryNotFoundException>();
    }

    [Test]
    public void DrawTagCloud_CreateFile()
    {
        var layouter = new CircularCloudLayouter(new Point(0, 0));
        var drawer = new TagCloudDrawer();
        const string filename = "filename.jpg";
        var directory = new DirectoryInfo($"{testDirectory.FullName}/");

        drawer.DrawTagCloud(layouter, filename, directory);

        File.Exists($"{directory.FullName}\\{filename}").Should().BeTrue();
    }
}